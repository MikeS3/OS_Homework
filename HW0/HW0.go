//process/pipe implementation in Go generated by ChatGPT
package main

import (
    "fmt"
    "os"
    "sync"
    "time"
)

func producer(pipeWriter *os.File, wg *sync.WaitGroup) {
    defer wg.Done()
    for i := 1; i <= 5; i++ {
        fmt.Fprintln(pipeWriter, i) // Write number to pipe
        fmt.Println("Producer:", i)
        time.Sleep(500 * time.Millisecond) // 500 ms Delay
    }
    pipeWriter.Close() // Close pipe after writing
}

func consumer(pipeReader *os.File, wg *sync.WaitGroup) {
    defer wg.Done()
    var num int
    for {
        _, err := fmt.Fscanf(pipeReader, "%d\n", &num)
        if err != nil {
            break // Exit on pipe close
        }
        fmt.Println("Consumer:", num)
    }
}

func main() {
    r, w, err := os.Pipe() // Create a pipe for IPC
    if err != nil {
        fmt.Println("Error creating pipe:", err)
        return
    }

    var wg sync.WaitGroup
    wg.Add(2)


    go producer(w, &wg)
    go consumer(r, &wg)

    wg.Wait() // Wait for both goroutines to finish
}

