//stack implementation in Go generated by ChatGPT
package main

import ("fmt"
	"os/exec"
)


// Stack structure to hold the stack data
type Stack struct {
    elements []int
}

// Push adds an element to the stack
func (s *Stack) Push(element int) {
    s.elements = append(s.elements, element)
}

// Pop removes and returns the top element from the stack
func (s *Stack) Pop() (int, bool) {
    if len(s.elements) == 0 {
        return 0, false // Return 0 and false if the stack is empty
    }
    topElement := s.elements[len(s.elements)-1]
    s.elements = s.elements[:len(s.elements)-1]
    return topElement, true
}

// Top returns the top element without removing it from the stack
func (s *Stack) Top() (int, bool) {
    if len(s.elements) == 0 {
        return 0, false
    }
    return s.elements[len(s.elements)-1], true
}

// IsEmpty checks if the stack is empty
func (s *Stack) IsEmpty() bool {
    return len(s.elements) == 0
}

func main() {
    // Create a new stack
    stack := Stack{}

    // Push some elements onto the stack
    stack.Push(10)
    stack.Push(20)
    stack.Push(30)

    // Top element (similar to Peek)
    top, _ := stack.Top()
    fmt.Println("Top element:", top)

    // Pop elements from the stack
    for !stack.IsEmpty() {
        popped, _ := stack.Pop()
        fmt.Println("Popped element:", popped)
    }

    // Check if the stack is empty after popping all elements
    if stack.IsEmpty() {
        fmt.Println("Stack is empty")


